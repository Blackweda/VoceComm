SQL REFERENCE SHEET
===================


(fields)		SELECT	                    *               Name, ID

(tables)		FROM                        dbo.Customer

(filters)		WHERE			    IS NOT NULL / City = 'Toronto' /
								          City IN ('Toronto', 'Edmonton') /
								          City LIKE 'To%' /
								          City NOT LIKE '%on%'
								          (City LIKE '%on%) OR/AND (Name LIKE 'Toronto')
								
				    ORDER BY 		  Name DESC	
				    
https://youtu.be/IhvN_MxLKBY

CREATE DATABASE MyDemoDB

USE MyDemoDB
CREATE TABLE employee (id int, name varchar(50), dept varchar(50), age int, salary decimal(18,2), location varchar(40))

INSERT INTO employee (name, dept, age, salary, location) VALUES ('Wayne', 'Programmer', 29, 45000, 'Toronto');

UPDATE employee SET name = 'Wayner', dept = 'Developer', salary = 50000
WHERE id = 1


DELETE FROM employee WHERE id = 1

---------------------------------------------------------------------------------

CREATE TABLE customers(
	id INT NOT NULL AUTO_INCREMENT,
	firstName VARCHAR(255),
	lastName VARCHAR(255),
	email VARCHAR(255),
	address VARCHAR(255),
	city VARCHAR(255),
	PRIMARY KEY(id)
);

INSERT INTO customers (firstName, lastName, city) VALUES
('Wayne', 'Williams', 'Toronto'),
('Amriz', 'Maharaz', 'Edmonton');


ALTER TABLE customers ADD testColumn VARCHAR(255);


ALTER TABLE customers MODIFY COLUMN testColumn INT(11);				// depends on Program using...
			ALTER COLUMN testColumn INT(11);
			

ALTER TABLE customers
DROP COLUMN testColumn;


SELECT state FROM customers;						// returns all rows' state
SELECT DISTINCT state FROM customers;					// returns only 1 instance of each state from all rows


https://youtu.be/nWeW3sCmD2k @ 27:00

SELECT * FROM customers WHERE age < 30

=
<> or !=
>
<
>=
BETWEEN
LIKE
IN
IS or IS NOT
IS NOT DISTINCT FROM
AS



CREATE INDEX Cindex
ON customers(city);

DROP INDEX Cindex ON customers;



CREATE TABLE orders (
	id INT NOT NULL AUTO_INCREMENT,
	orderNumber INT,
	productId INT, 
	customerId INT,
	orderDate DATETIME DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY(id),
	FOREIGN KEY(customerId) REFERENCES customers(id),
	FOREIGN KEY(productId) REFERENCES products(id)
);


JOINS

- used to combine rows from two or more tables based on a common field between them.

INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN




SELECT customers.firstName, customers.lastName, orders.orderNumber
FROM customers
INNER JOIN orders
ON customers.id = orders.customerId
ORDER BY orders.orderNumber;


SELECT customers.firstName, customers.lastName, orders.orderNumber, orders.orderDate
FROM customers
LEFT JOIN orders ON customers.id = orders.customerId
ORDER BY customers.lastName;


SELECT orders.OrderNumber, customers.firstName, customers.lastName
FROM orders
RIGHT JOIN customers 
ON orders.customerID = customers.id
ORDER BY orders.orderNumber;


SELECT orders.orderNumber, customers.firstName, customers.lastName, products.name
FROM orders
INNER JOIN products
ON orders.productId = products.id
INNER JOIN customers
ON orders.customerId = customers.id
ORDER BY orders.orderNumber;


ALIASES*****************

SELECT firstName AS 'First Name', lastName AS 'Last Name' FROM customers;


SELECT CONCAT(firstName, ' ', lastName) AS 'Full Name', address, state 
FROM customers;

SELECT o.id, o.orderDate, c.firstName, c.lastName
FROM customers AS c, orders AS o;

			


				    
